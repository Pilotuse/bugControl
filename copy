// 全局拦截器，这个文件不要动！！！！
import axios from "axios";
import { Loading, Message } from 'element-ui'  // 配置loading动画
import router from '../router'



let loading, cancel;
// 实例化


function startLoading() {
    loading = Loading.service({
        lock: true,
        text: '联络地球中...',
        spinner: 'el-icon-loading',
        background: 'rgba(0, 0, 0, 0.2)'
    })
}

function endLoading() {
    loading.close()
}

let needLoadingRequestCount = 0
const showFullScreenLoading = function () {
    if (needLoadingRequestCount === 0) startLoading();
    needLoadingRequestCount++
}

const tryHideFullScreenLoading = function () {
    if (needLoadingRequestCount <= 0) return
    needLoadingRequestCount--
    if (needLoadingRequestCount === 0) endLoading();
}


// 配置全局的拦截器
axios.interceptors.request.use(config => {
    showFullScreenLoading()
    if(typeof(cancel) === 'function') cancel('强制取消了请求')
    config['cancelToken'] = new axios.CancelToken(function(c){
        cancel = c
    })
    if (localStorage.getItem('users')) {
        let token = JSON.parse(localStorage.getItem("users")).token
        config.headers.common["authorization"] = token
    }
    loading = Loading.service({
        lock: true,
        text: '数据通讯中...',
        spinner: 'el-icon-loading',
        background: 'rgba(0, 0, 0, 0.7)',
    });
    return config;
}, error => {
    return Promise.reject(error)
});



//响应头拦截
axios.interceptors.response.use(response => {
    tryHideFullScreenLoading()
    cancel = null
    return response.data;
}, error => {
    cancel = null
    tryHideFullScreenLoading()
    //当返回信息为未登录或者登录失效的时候重定向为登录页面
    if (axios.isCancel(error)) {
        if (error.response.status == '401') {
            Message.error({ message: error.response.data.msg })
            localStorage.clear()
            router.push({
                path: '/login',
                query: { redirect: router.currentRoute.fullPath } //从哪个页面跳转
            })
        }
        return new Promise(() => { })
    } else {
        // 把错误继续向下传递
        return Promise.reject(error)
    }


});

export default axios;
